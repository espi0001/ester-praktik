---
const { cardContent } = Astro.props;
---

<section class="scrolling" id="projects">
  <div class="scrolling-top">
    <h3>My projects</h3>
    <div class="buttons">
      <button class="scroll-arrow left" id="scroll-left">&larr;</button>
      <button class="scroll-arrow right" id="scroll-right">&rarr;</button>
    </div>
  </div>

  <ul class="full-width">
    {
      cardContent.map((card) => (
        <li>
          <a href={card.link} target="_blank">
            <img src={card.image} alt={card.title} />
            <h4>{card.title}</h4>
            <p>{card.body}</p>
          </a>

          <a href={card.link} target="_blank" class="project-link">
            Link to the project
          </a>
        </li>
      ))
    }
  </ul>
</section>

<style>
  @layer components {
    .scrolling {
      grid-column: full;
      display: grid;
      grid-template-columns: var(--layout-grid2);
      grid-template-rows: auto auto;
      padding: var(--space-s-m);
      row-gap: var(--space-s-m);
      background: var(--sort);
      color: var(--baggrund);

      > ul {
        scroll-snap-type: x mandatory;
        grid-column: 1 / -1;
        grid-row: 2;
        display: flex;
        gap: var(--space-s-m);
        overflow-x: auto;
        list-style: none;
        padding-inline: max(1rem, 50% - var(--content) / 10px);
        margin: 0;

        li {
          flex-basis: min(500px, 90%);
          flex-shrink: 0;
          background: var(--baggrund);
          color: var(--sort);
          border-radius: 30px;
          padding: var(--space-s-m);
          transition: all 0.4s ease-in-out;
          display: flex;
          flex-direction: column;
          gap: var(--space-xs-s);
          cursor: pointer;
          scroll-snap-align: center;
          /* align-self: start; */
          &:first-child {
            margin-left: calc(50% - var(--content) / 2);
          }
          &:last-child {
            margin-right: calc(50% - var(--content) / 2);
          }
          &:hover {
            transform: scale(0.95);
          }
          a:first-of-type {
            h4 {
              margin-top: var(--space-xs-s);
            }
            p {
              margin-top: var(--space-3xs-2xs);
            }
          }

          a.project-link {
            transition: all 0.4s ease-out;
            margin-top: var(--space-3xs-2xs);
            font-weight: bold;
            position: relative;
            display: block;
          }

          a.project-link::after {
            content: "";
            position: absolute;
            width: 0;
            height: 1px;
            background-color: var(--sort);
            left: 0;
            bottom: -2px;
            transition: width 0.3s ease;
          }

          a.project-link:hover::after {
            width: 37%;
          }
          @media (width < 600px) {
            li {
              flex-basis: min(300px, 90%);
            }

            li:first-child,
            li:last-child {
              margin-left: 0;
              margin-right: 0;
            }
          }
        }
      }

      .scrolling-top {
        grid-column: 2 / 4;
        grid-row: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;

        .buttons {
          display: flex;
          gap: var(--space-xs-s);
          .scroll-arrow {
            background: var(--baggrund);
            color: var(--sort);
            padding: 11px 14px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.4s ease-in-out;

            &:hover {
              background-color: var(--brun);
              color: var(--sort);
            }
          }
        }
      }
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector(".scrolling ul");
    const leftButton = document.getElementById("scroll-left");
    const rightButton = document.getElementById("scroll-right");

    const scrollAmount = container.querySelector("li").offsetWidth + 16; // Dynamically calculate card width + gap

    leftButton.addEventListener("click", () => {
      container.scrollBy({ left: -scrollAmount, behavior: "smooth" });
    });

    rightButton.addEventListener("click", () => {
      container.scrollBy({ left: scrollAmount, behavior: "smooth" });
    });
  });
</script>
